\set QUIET 1

\set slowqueries 'SELECT   (total_time / 1000 / 60) as total_minutes,   (total_time/calls) as average_time_millis, (rows/calls) as avg_rows, query FROM pg_stat_statements ORDER BY 1 DESC '

\set trashindexes '( select s.schemaname as sch, s.relname as rel, s.indexrelname as idx, s.idx_scan as scans, pg_size_pretty(pg_relation_size(s.relid)) as ts, pg_size_pretty(pg_relation_size(s.indexrelid)) as "is" from pg_stat_user_indexes s join pg_index i on i.indexrelid=s.indexrelid left join pg_constraint c on i.indrelid=c.conrelid and array_to_string(i.indkey, '' '') = array_to_string(c.conkey, '' '') where i.indisunique is false and pg_relation_size(s.relid) > 1000000 and s.idx_scan < 100000 and c.confrelid is null order by s.idx_scan asc, pg_relation_size(s.relid) desc )'

\set unusedindexes 'SELECT relname, 100 * idx_scan / (seq_scan + idx_scan) percent_of_times_index_used, n_live_tup rows_in_table FROM pg_stat_user_tables WHERE seq_scan + idx_scan > 0 and (100 * idx_scan / (seq_scan + idx_scan) < 90) and n_live_tup > 10000 ORDER BY n_liv
e_tup DESC;'

\set missingindexes '( select src_table, dst_table, fk_name, pg_size_pretty(s_size) as s_size, pg_size_pretty(d_size) as d_size, d from ( select distinct on (1,2,3,4,5) textin(regclassout(c.conrelid)) as src_table, textin(regclassout(c.confrelid)) as dst_table, c.conname as fk_name, pg_relation_size(c.conrelid) as s_size, pg_relation_size(c.confrelid) as d_size, array_upper(di.indkey::int[], 1) + 1 - array_upper(c.conkey::int[], 1) as d from pg_constraint c left join pg_index di on di.indrelid = c.conrelid and array_to_string(di.indkey, '' '') ~ (''^'' || array_to_string(c.conkey, '' '') || ''( |$)'') join pg_stat_user_tables st on st.relid = c.conrelid where c.contype = ''f'' order by 1,2,3,4,5,6 asc) mfk where mfk.d is distinct from 0 and mfk.s_size > 1000000 order by mfk.s_size desc, mfk.d desc )'

\set rtsize '(select table_schema, table_name, pg_relation_size( quote_ident( table_schema ) || \'.\' || quote_ident( table_name ) ) as size, pg_total_relation_size( quote_ident( table_schema ) || \'.\' || quote_ident( table_name ) ) as total_size  from information_schema.tables where table_type = \'BASE TABLE\' and table_schema not in (\'information_schema\', \'pg_catalog\') order by pg_relation_size( quote_ident( table_schema ) || \'.\' || quote_ident( table_name ) ) desc, table_schema, table_name)'

\set tsize '(select table_schema, table_name, pg_size_pretty(size) as size, pg_size_pretty(total_size) as total_size from (:rtsize) x order by x.size desc, x.total_size desc, table_schema, table_name)'

\set dbsize 'SELECT datname, pg_size_pretty(pg_database_size(datname)) db_size FROM pg_database ORDER BY db_size;'

\set uselesscol 'SELECT nspname, relname, attname, typname, (stanullfrac*100)::int AS null_percent, case when stadistinct >= 0 then stadistinct else abs(stadistinct)*reltuples end AS \"distinct\", case 1 when stakind1 then stavalues1 when stakind2 then stavalues2 end AS \"values\" FROM pg_class c JOIN pg_namespace ns ON (ns.oid=relnamespace) JOIN pg_attribute ON (c.oid=attrelid) JOIN pg_type t ON (t.oid=atttypid) JOIN pg_statistic ON (c.oid=starelid AND staattnum=attnum) WHERE nspname NOT LIKE E\'pg\\\\_%\' AND nspname != \'information_schema\' AND relkind=\'r\' AND NOT attisdropped AND attstattarget != 0 AND reltuples >= 100 AND stadistinct BETWEEN 0 AND 1 ORDER BY nspname, relname, attname;'

\set waits 'SELECT pg_stat_activity.pid, pg_stat_activity.query, pg_stat_activity.waiting, now() - pg_stat_activity.query_start  as "totaltime", pg_stat_activity.backend_start FROM pg_stat_activity WHERE pg_stat_activity.query !~ \'%IDLE%\'::text AND  pg_stat_activity.waiting = true'  
  
\set locks 'select pg_locks.pid,mode,query from pg_locks,pg_stat_activity where granted=false and locktype=\'transactionid\' and pg_locks.pid=pg_stat_activity.pid order by pg_locks.pid,granted'

\set transactions 'SELECT now() - query_start as runtime, * FROM pg_stat_activity ORDER BY runtime DESC'

\set queries 'SELECT now() - query_start as runtime, * FROM pg_stat_activity WHERE query NOT LIKE \'%<IDLE>%\' ORDER BY runtime DESC'

\set settings 'select name, setting,unit,context from pg_settings;'

\set conninfo 'select usename, count(*) from pg_stat_activity group by usename;'

\x auto
\set ON_ERROR_ROLLBACK interactive
\set HISTCONTROL ignoredups
\set HISTSIZE 2000
\set COMP_KEYWORD_CASE upper
\pset linestyle unicode
\pset null Â¤
\pset format wrapped
\timing
\set PROMPT1 '(%n@%M:%>) [%/] > '
\set PROMPT2 ''
\encoding unicode
\set ECHO_HIDDEN ON

\set menu '\\i ~/.psqlrc'
\unset QUIET
\echo
\echo 'Useful commands:'
\echo '                 :menu           - see options'
\echo '                 :settings       - see current settings'
\echo '                 :conninfo       - see connection information'
\echo '                 :transactions   - see current transactions'
\echo '                 :queries        - see current queries'
\echo '                 :slowqueries    - see slow queries'                                                                                                                                                                                                                    
\echo '                 :trashindexes   - see indexes in need of cleaning'                                                                                                                                                                                                     
\echo '                 :missingindexes - see missing indexes'       
\echo '                 :uselesscol     - see useless columns'
\echo '                 :waits          - see IDLE queries'                                                                                                                                                                                                                    
\echo '                 :locks          - see locks'                                                                                                                                                                                                                           
\echo '                 :tsize          - table sizes'
\echo '                 :dbsize         - database sizes'                                                                                                                                                                                                                         
\echo                                                                                                                                                                                                                                                                          
\echo 'Example:'                                                                                                                                                                                                                                                               
\echo ' :tsize LIMIT 5;'                                                                                                                                                                                                                                                       
\echo     
